import os

from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, Command, or_f
from aiogram import F
from dotenv import load_dotenv, find_dotenv
from sqlalchemy.ext.asyncio import async_session

from ORM.ORM_Query import orm_get_products, orm_get_customers_id, orm_add_customer, orm_get_customer,orm_customer_phone, orm_update_customer
from filters.chat_type import ChatTypeFilter
from handlers.user_group import user_group_router
from keyboards.inline import inline_kb_builder
from keyboards.reply import start_kb, send_phone_kb


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

load_dotenv(find_dotenv())

supergroup_id = os.getenv("supergroup_id")

@user_private_router.message(CommandStart())
async def start_command(message:types.message, session:async_session):

    if message.from_user.id not in await orm_get_customers_id(session):
        data = {
            "first_name": message.from_user.first_name,
            "user_id": message.from_user.id,
        }
        await orm_add_customer(session, data)

    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëã\n–ú–µ–Ω—è –∑–æ–≤—É—Ç Bot SID."
                         " –Ø –ø–æ–º–æ–≥–∞—é —É–∑–Ω–∞—Ç—å –∫—Ç–æ –º—ã —Ç–∞–∫–∏–µ, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏,"
                         " –∞ –µ—â–µ —è –æ—Ç–≤–µ—á–≤—é –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                         "–¢–∞–∫ –∂–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                         "–ù–∞—á–Ω–µ–º ?)...üöÄ",
                         reply_markup=start_kb)

@user_private_router.message(or_f((Command("about")),(F.text.lower() == "–æ –Ω–∞—Å")))
async def about_us(message:types.Message):
    await message.answer("SID —ç—Ç–æ IT —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–∞–ª–æ–Ω–∞–º, –º–∞–≥–∞–∑–∏–Ω–∞–º"
                         " –∏, –≤ –æ–±—â–µ–º, –≤—Å–µ–º , –∫—Ç–æ —Ö–æ—Ç–µ–ª –±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å –ø—Ä–æ—Ü–µ—Å—Å—ã,"
                         " –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä—É–∫–∏ –æ—Ç —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏, —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –≤ –º–µ—Å—Å–µ–Ω–∂–µ—Ä–∞—Ö.\n"
                         "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ ü§ù")

@user_private_router.message(or_f((Command("products")),(F.text.lower() == "–Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã")))
async def our_products(message:types.Message,session:async_session):
        for product in await orm_get_products(session):
            await message.answer(f"{product.name}\n{product.description}\nPrice:{round(product.price,2)}$")


@user_private_router.message(or_f((Command("FAQ")),(F.text.lower() == "faq")))
async def our_products(message:types.Message):
        await message.answer("–Ø –µ—â–µ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–Ω–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–ª–∏)\n"
                             "–û–±–µ—â–∞—é –≤ –±—É–¥—É—â–µ–º —Å—Ç–∞—Ç—å —É–º–Ω–µ–µ –∏ –±–æ–ª—å—à–µ –≤–∞–º –ø–æ–º–æ–≥–∞—Ç—åü•∫")





@user_private_router.message(or_f((Command("request")),(F.text.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")))
async def request(message:types.Message,session:async_session):

    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!\n"
                         "–£—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫–∏–∞—Ö",
                     reply_markup=inline_kb_builder(
                         btns={
                             "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É": f"request_{supergroup_id}"
                         }
                     )
                     )



@user_private_router.callback_query(F.data.startswith("request_"))
async def send_request(callback:types.CallbackQuery,session:async_session,bot:Bot):
    try:
        for cstmr in await orm_get_customer(session, callback.from_user.id):
            if await orm_customer_phone(session, callback.from_user.id) != [None]:
                await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–ª–µ–Ω–∞", show_alert=True)
                await bot.send_message(text=f"{cstmr.first_name} —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {cstmr.phone_number} \n"
                                            f"–∏ —Ç–µ–ª–µ–≥—Ä–∞–º id = {cstmr.user_id} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É! \n–ù–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å!",
                                       chat_id=callback.data.split("_")[-1]
                                       )
            else:
                await callback.message.answer("–ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=send_phone_kb)

    except:
        await bot.send_message(text="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞—è–≤–∫–∏",chat_id=supergroup_id)



@user_private_router.callback_query(F.data.startswith("want_"))
async def inline_from_mailling(callback: types.CallbackQuery, session: async_session, bot: Bot):
    try:
        for cstmr in await orm_get_customer(session, callback.from_user.id):
            if await orm_customer_phone(session, callback.from_user.id) != [None]:
                await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–ª–µ–Ω–∞", show_alert=True)
                await bot.send_message( text=f"{cstmr.first_name} —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {cstmr.phone_number} \n"
                                        f"–∏ —Ç–µ–ª–µ–≥—Ä–∞–º id = {cstmr.user_id} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É! \n–ù–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å!",
                                        chat_id=callback.data.split("_")[-1]
                                       )
            else:
                await callback.message.answer("–ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=send_phone_kb)

    except:
        await bot.send_message(text="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞—è–≤–∫–∏", chat_id=supergroup_id)



@user_private_router.message(F.contact)
async def give_phone(message:types.Message,session: async_session):
    data = {
        "phone_number" : message.contact.phone_number
    }
    await orm_update_customer(session=session,data=data,customer_id=message.from_user.id)
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã \n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",reply_markup=start_kb)


@user_private_router.message(F.text.lower() == "–º–Ω–µ –Ω—É–∂–Ω–æ –µ—â–µ –ø–æ–¥—É–º–∞—Ç—å")
async def dont_give_phone(message:types.Message):
    await message.answer("Ok\n–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å =)",reply_markup=start_kb)







